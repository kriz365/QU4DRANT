"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  GoogleWorkspace: () => GoogleWorkspace,
  googleWorkspace: () => googleWorkspace
});
module.exports = __toCommonJS(index_exports);

// src/google-workspace.ts
var import_meta = {};
var BASE_URL = (
  //@ts-expect-error VITE_BASE_URL is not defined in the environment
  import_meta.env.VITE_SUPERDEV_BASE_URL ?? "https://superdev.build/api"
);
var GoogleWorkspace = class {
  appId;
  constructor(appId) {
    this.appId = appId;
  }
  async getSheetValues(input) {
    const response = await fetch(`${BASE_URL}/integrations/google-workspace`, {
      method: "POST",
      body: JSON.stringify({
        action: "getSheetValues",
        spreadsheetId: input.spreadsheetId,
        range: input.range
      }),
      headers: {
        "Content-Type": "application/json",
        "x-app-id": this.appId
      }
    });
    if (!response.ok) {
      throw new Error(response.statusText);
    }
    const data = await response.json();
    return data;
  }
  async updateSheetValues(input) {
    const response = await fetch(`${BASE_URL}/integrations/google-workspace`, {
      method: "POST",
      body: JSON.stringify({
        action: "updateSheetValues",
        spreadsheetId: input.spreadsheetId,
        range: input.range,
        values: input.values
      }),
      headers: {
        "Content-Type": "application/json",
        "x-app-id": this.appId
      }
    });
    if (!response.ok) {
      throw new Error(response.statusText);
    }
    const data = await response.json();
    return data;
  }
  // async updateSheetValues(input: UpdateSheetValues.UpdateSheetValuesInput) {
  //   return updateSheetValues(input);
  // }
  async getSpreadsheetStructure(input) {
    const response = await fetch(`${BASE_URL}/integrations/google-workspace`, {
      method: "POST",
      body: JSON.stringify({
        action: "getSpreadsheetStructure",
        spreadsheetId: input.spreadsheetId
      }),
      headers: {
        "Content-Type": "application/json",
        "x-app-id": this.appId
      }
    });
    if (!response.ok) {
      const errorBody = await response.text();
      throw new Error(
        `Google Workspace API request failed with status ${response.status}: ${errorBody}`
      );
    }
    const data = await response.json();
    if (data.error) {
      throw new Error(data.error);
    }
    return data;
  }
  // async listDocuments(input: ListDocuments.ListDocumentsInput) {
  //   return listDocuments(input);
  // }
  // async getDocument(input: GetDocument.GetDocumentInput) {
  //   return getDocument(input);
  // }
  // async getDocumentAsMarkdown(
  //   input: GetDocumentAsMarkdown.GetDocumentAsMarkdownInput
  // ) {
  //   return getDocumentAsMarkdown(input);
  // }
  // async getDocumentAsMarkdown(
  //   input: GetDocumentAsMarkdown.GetDocumentAsMarkdownInput
  // ) {
  //   return getDocumentAsMarkdown(input);
  // }
};

// src/index.ts
var import_meta2 = {};
var googleWorkspace = new GoogleWorkspace(
  //@ts-ignore
  import_meta2?.env?.VITE_APP_ID || ""
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GoogleWorkspace,
  googleWorkspace
});
