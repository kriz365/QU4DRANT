// src/llm.ts
var BASE_URL = (
  //@ts-expect-error VITE_BASE_URL is not defined in the environment
  import.meta.env?.VITE_BASE_URL ?? (typeof window === "undefined" ? process?.env?.VITE_BASE_URL : "")
);
var LLM = class {
  async generateText({
    prompt,
    schema,
    verifyJwt,
    supabaseClient
  }) {
    if (verifyJwt && !supabaseClient) {
      throw new Error(
        "Supabase client is required for JWT verification but is not available."
      );
    }
    let session = null;
    if (verifyJwt) {
      const {
        data: { session: currentSession }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } = await supabaseClient.auth.getSession();
      if (!currentSession) {
        throw new Error(
          "User not authenticated, cannot verify JWT for LLM call. Please authenticate first."
        );
      }
      session = currentSession;
    }
    const response = await fetch(`${BASE_URL}/api/integrations/invoke-llm`, {
      method: "POST",
      body: JSON.stringify({
        prompt,
        ...schema ? { schema } : {}
      }),
      headers: {
        "Content-Type": "application/json",
        // Conditionally add Authorization header only if verifyJwt is true and session was fetched
        ...verifyJwt && session?.access_token ? {
          Authorization: `Bearer ${session?.access_token}`
        } : {}
      }
    });
    if (!response.ok) {
      const errorBody = await response.text();
      throw new Error(
        `LLM API request failed with status ${response.status}: ${errorBody}`
      );
    }
    const data = await response.json();
    if (schema) {
      return data;
    }
    return data.response;
  }
  async generateImage(prompt, options) {
    const response = await fetch(
      `${BASE_URL}/api/integrations/generate-image`,
      {
        method: "POST",
        body: JSON.stringify({
          prompt,
          ...options
        }),
        headers: {
          "Content-Type": "application/json"
        }
      }
    );
    if (!response.ok) {
      const errorBody = await response.text();
      throw new Error(
        `Image generation API request failed with status ${response.status}: ${errorBody}`
      );
    }
    const { data = { images: [] } } = await response.json();
    if (!data.images || !data.images.length) {
      throw new Error(
        "Invalid response format from image generation API: No images returned."
      );
    }
    return data.images[0].url;
  }
};

// src/index.ts
var llm = new LLM();
export {
  LLM,
  llm
};
