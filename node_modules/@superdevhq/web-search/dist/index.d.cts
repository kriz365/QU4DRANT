import { z } from 'zod';

/**
 * Schema for web search parameters
 */
declare const WebSearchParamsSchema: z.ZodObject<{
    query: z.ZodString;
    max_results: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    include_images: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    include_answer: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    search_depth: z.ZodDefault<z.ZodOptional<z.ZodEnum<["basic", "advanced"]>>>;
}, "strip", z.ZodTypeAny, {
    query: string;
    max_results: number;
    include_images: boolean;
    include_answer: boolean;
    search_depth: "basic" | "advanced";
}, {
    query: string;
    max_results?: number | undefined;
    include_images?: boolean | undefined;
    include_answer?: boolean | undefined;
    search_depth?: "basic" | "advanced" | undefined;
}>;
/**
 * Type definition for web search parameters
 */
type WebSearchParams = z.infer<typeof WebSearchParamsSchema>;
/**
 * Schema for web search result
 */
declare const WebSearchResultSchema: z.ZodObject<{
    id: z.ZodString;
    url: z.ZodString;
    title: z.ZodString;
    content: z.ZodString;
    domain: z.ZodString;
    score: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    url: string;
    title: string;
    content: string;
    domain: string;
    score: number;
}, {
    id: string;
    url: string;
    title: string;
    content: string;
    domain: string;
    score: number;
}>;
/**
 * Type definition for web search result
 */
type WebSearchResult = z.infer<typeof WebSearchResultSchema>;
/**
 * Schema for web search output
 */
declare const WebSearchOutputSchema: z.ZodObject<{
    query: z.ZodString;
    results: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        url: z.ZodString;
        title: z.ZodString;
        content: z.ZodString;
        domain: z.ZodString;
        score: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        url: string;
        title: string;
        content: string;
        domain: string;
        score: number;
    }, {
        id: string;
        url: string;
        title: string;
        content: string;
        domain: string;
        score: number;
    }>, "many">;
    answer: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    query: string;
    results: {
        id: string;
        url: string;
        title: string;
        content: string;
        domain: string;
        score: number;
    }[];
    answer?: string | undefined;
}, {
    query: string;
    results: {
        id: string;
        url: string;
        title: string;
        content: string;
        domain: string;
        score: number;
    }[];
    answer?: string | undefined;
}>;
/**
 * Type definition for web search output
 */
type WebSearchOutput = z.infer<typeof WebSearchOutputSchema>;

declare class WebSearch {
    appId: string;
    apiKey?: string;
    constructor(appId: string);
    search(input: WebSearchParams): Promise<WebSearchOutput>;
}

/**
 * Error class for handling web search API errors
 */
declare class WebSearchError extends Error {
    readonly statusCode: number;
    readonly body: string;
    constructor(message: string, statusCode: number, body?: string);
    /**
     * Returns true if the error is due to rate limiting
     */
    isRateLimited(): boolean;
    /**
     * Returns true if the error is due to authentication issues
     */
    isAuthError(): boolean;
    /**
     * Returns true if the error is due to invalid input
     */
    isInputError(): boolean;
    /**
     * Returns true if the error is a server-side error
     */
    isServerError(): boolean;
}

declare const webSearch: WebSearch;

export { WebSearch, WebSearchError, type WebSearchOutput, WebSearchOutputSchema, type WebSearchParams, WebSearchParamsSchema, type WebSearchResult, WebSearchResultSchema, webSearch };
