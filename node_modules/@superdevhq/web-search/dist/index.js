// src/error.ts
var WebSearchError = class extends Error {
  statusCode;
  body;
  constructor(message, statusCode, body = "") {
    super(message);
    this.name = "WebSearchError";
    this.statusCode = statusCode;
    this.body = body;
  }
  /**
   * Returns true if the error is due to rate limiting
   */
  isRateLimited() {
    return this.statusCode === 429 || this.statusCode === 432 || this.statusCode === 433;
  }
  /**
   * Returns true if the error is due to authentication issues
   */
  isAuthError() {
    return this.statusCode === 401 || this.statusCode === 403;
  }
  /**
   * Returns true if the error is due to invalid input
   */
  isInputError() {
    return this.statusCode === 400;
  }
  /**
   * Returns true if the error is a server-side error
   */
  isServerError() {
    return this.statusCode >= 500;
  }
};

// src/web-search.ts
var BASE_URL = (
  //@ts-expect-error VITE_BASE_URL is not defined in the environment
  import.meta.env?.VITE_BASE_URL ?? (typeof window === "undefined" ? process?.env?.VITE_BASE_URL : "")
);
var WebSearch = class {
  appId;
  apiKey;
  constructor(appId) {
    this.appId = appId;
  }
  async search(input) {
    const headers = {
      "Content-Type": "application/json"
    };
    headers["x-app-id"] = this.appId;
    let response;
    try {
      response = await fetch(`${BASE_URL}/api/integrations/web-search`, {
        method: "POST",
        headers,
        body: JSON.stringify(input)
      });
    } catch (error) {
      throw new WebSearchError(
        "Failed to connect to web search API",
        0,
        error instanceof Error ? error.message : String(error)
      );
    }
    const errorBody = !response.ok ? await response.text() : "";
    if (!response.ok) {
      throw new WebSearchError(
        `Web search API request failed with status ${response.status}`,
        response.status,
        errorBody
      );
    }
    let data;
    try {
      data = await response.json();
    } catch (error) {
      throw new WebSearchError(
        "Failed to parse API response",
        response.status,
        error instanceof Error ? error.message : String(error)
      );
    }
    if (data.error) {
      throw new WebSearchError(
        data.error,
        response.status,
        JSON.stringify(data)
      );
    }
    return data;
  }
};

// src/schema.ts
import { z } from "zod";
var WebSearchParamsSchema = z.object({
  query: z.string().min(1, "Search query is required"),
  max_results: z.number().int().min(1).max(10).optional().default(5),
  include_images: z.boolean().optional().default(false),
  include_answer: z.boolean().optional().default(true),
  search_depth: z.enum(["basic", "advanced"]).optional().default("basic")
});
var WebSearchResultSchema = z.object({
  id: z.string(),
  url: z.string().url(),
  title: z.string(),
  content: z.string(),
  domain: z.string(),
  score: z.number().min(0).max(1)
});
var WebSearchOutputSchema = z.object({
  query: z.string(),
  results: z.array(WebSearchResultSchema),
  answer: z.string().optional()
});

// src/index.ts
var webSearch = new WebSearch(
  //@ts-ignore
  import.meta?.env?.VITE_APP_ID || ""
);
export {
  WebSearch,
  WebSearchError,
  WebSearchOutputSchema,
  WebSearchParamsSchema,
  WebSearchResultSchema,
  webSearch
};
